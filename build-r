#!/bin/bash

#
# See the following for details:
#
# Building R:
#  http://cran.r-project.org/doc/manuals/R-admin.html#Installing-R-under-Unix_002dalikes
#  http://cran.r-project.org/doc/manuals/R-admin.html#Essential-programs-and-libraries
#
# Packages included on Heroku Cedar
#  https://devcenter.heroku.com/articles/cedar-ubuntu-packages
#

# fail fast
set -e

# debug
# set -x

## HELPERS

function download() {
  if [ ! -f "$2" ]; then
    echo Downloading $2...
    curl $1 -o $2 -s -S
  else
    echo Got $2...
  fi
}

## SCRIPT

if [ -z "$STACK" ]; then
  STACK="cedar-14"
fi

R_VERSION="${1:-3.2.2}"
R_VERSION_MAJOR=${R_VERSION:0:1}
BUILD_NO="${2:-`date +%Y%m%d-%H%M`}"
BASEDIR="$( cd -P "$( dirname "$0" )" && pwd )"
VENDORDIR=$BASEDIR/vendor
GCC_VERSION=4.8

# check arguments
if ([ -z "$R_VERSION" ] || [ -z "$BUILD_NO" ]); then
  echo
  echo "USAGE: $0 VERSION [BUILDNUM]"
  echo
  echo "  VERSION    is the R version. E.g. X.X.X"
  echo "  BUILDNUM   the build number. E.g. YYYYMMDD-HHMM"
  echo
  exit 1
fi

echo ======================================================================
echo Linux Version  = `uname --all`
echo Stack          = $STACK
echo Base Dir       = $BASEDIR
echo Vendor Dir     = $VENDORDIR
echo R Version      = $R_VERSION
echo Build No.      = $BUILD_NO
echo
( set -o posix; set )
echo
echo ======================================================================

# R was installed via Aptfile so that any dependencies get installed,
# but it won't work due to pathing, so remove all traces of it
rm     /app/.apt/etc/bash_completion.d/R
rm     /app/.apt/usr/bin/R
rm     /app/.apt/usr/bin/Rscript
rm     /app/.apt/usr/lib/libR.so
rm     /app/.apt/usr/lib/pkgconfig/libR.pc
rm -rf /app/.apt/etc/R
rm -rf /app/.apt/share/R
rm -rf /app/.apt/usr/lib/R
rm -rf /app/.apt/usr/share/doc/r-base
rm -rf /app/.apt/usr/share/doc/r-base-core
rm -rf /app/.apt/usr/share/doc/r-doc-html
rm -rf /app/.apt/usr/share/R

# Remove unecessary stuff to avoid slug bloat
rm -rf /app/.apt/etc
rm -rf /app/.apt/var
rm -rf /app/.apt/usr/sbin
rm -rf /app/.apt/usr/share

# create output directory
mkdir -p $VENDORDIR

# get the sources
download "http://cran.r-project.org/src/base/R-$R_VERSION_MAJOR/R-$R_VERSION.tar.gz" R-$R_VERSION.tar.gz
tar xzf R-$R_VERSION.tar.gz

export R_BASE="$VENDORDIR/R"
export R_INCLUDE="$R_BASE/lib64/R/include"
export LD_LIBRARY_PATH="/app/.apt/usr/lib/gcc/x86_64-linux-gnu/$GCC_VERSION:/app/.apt/usr/lib/libblas:/app/.apt/usr/lib/lapack:$LD_LIBRARY_PATH"
export LDFLAGS="-L/app/.apt/usr/lib/gcc/x86_64-linux-gnu/$GCC_VERSION -L/app/.apt/usr/lib/libblas -L/app/.apt/usr/lib/lapack $LDFLAGS"

mkdir -p $R_BASE

# copy over our customized vars.mk file
cp -f $BASEDIR/vars.mk $BASEDIR/R-$R_VERSION/share/make/vars.mk

pushd $BASEDIR/R-$R_VERSION/

# build R
echo ======================================================================
echo Building R
echo ======================================================================

# download the recommended packages
# ./tools/rsync-recommended

# copy over additional recommended packages to include (as specified in vars.mk)
cp $BASEDIR/packages/* ./src/library/Recommended

# See https://cran.r-project.org/doc/manuals/r-release/R-admin.html#Configuration-options
./configure --prefix=$R_BASE           \
            --disable-memory-profiling  \
            --disable-R-profiling       \
            --enable-R-shlib           \
            --with-blas                \
            --without-cairo               \
            --without-jpeglib             \
            --with-lapack              \
            --with-readline            \
            --without-system-bzlib        \
            --with-system-pcre         \
            --with-system-zlib         \
            --with-tcltk               \
            --enable-lto

# copy configuration for debugging purposes
cp config.* $R_BASE/

make
make install
make clean

popd

/app/vendor/R/bin/R --vanilla <<EOF
install.packages("RPostgreSQL", repos='http://cran.cnr.Berkeley.edu')
install.packages("zoo", repos='http://cran.cnr.Berkeley.edu')
install.packages("RCurl", repos='http://cran.cnr.Berkeley.edu')
install.packages("XML", repos='http://cran.cnr.Berkeley.edu')
EOF

# move .apt under vendor, buildpack compile will move it back
mkdir -p /app/vendor/.apt
cp -R /app/.apt/* /app/vendor/.apt

# compress and upload to S3 bucket
BINARIES_FILE="R-$R_VERSION-binaries-$BUILD_NO.tar.gz"
pushd /app
tar czf $BINARIES_FILE vendor/.apt vendor/R
popd

echo ======================================================================
echo Uploading binaries to S3
bundle install
bundle exec ruby ./s3_upload.rb $BINARIES_FILE $STACK
